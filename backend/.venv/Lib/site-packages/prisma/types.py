# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = Literal['default', 'insensitive']
SortOrder = Literal['asc', 'desc']

MetricsFormat = Literal['json', 'prometheus']


class _DatasourceOverrideOptional(TypedDict, total=False):
    env: str
    name: str


class DatasourceOverride(_DatasourceOverrideOptional):
    url: str


# NOTE: we don't support some options as their type hints are not publicly exposed
# https://github.com/encode/httpx/discussions/1977
class HttpConfig(TypedDict, total=False):
    app: Callable[[Mapping[str, Any], Any], Any]
    http1: bool
    http2: bool
    limits: httpx.Limits
    timeout: Union[None, float, httpx.Timeout]
    trust_env: bool
    max_redirects: int


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# Supplier types

class SupplierOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Supplier create method"""
    id: _str
    url: Optional[_str]
    name: _str
    riskScore: _str
    summary: _str
    flags: List[_str]
    analysisData: Optional['fields.Json']
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    chats: 'ChatLogCreateManyNestedWithoutRelationsInput'


class SupplierCreateInput(SupplierOptionalCreateInput):
    """Required arguments to the Supplier create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class SupplierOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Supplier create method, without relations"""
    id: _str
    url: Optional[_str]
    name: _str
    riskScore: _str
    summary: _str
    flags: List[_str]
    analysisData: Optional['fields.Json']
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class SupplierCreateWithoutRelationsInput(SupplierOptionalCreateWithoutRelationsInput):
    """Required arguments to the Supplier create method, without relations"""


class SupplierCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'SupplierCreateWithoutRelationsInput'
    connect: 'SupplierWhereUniqueInput'


class SupplierCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['SupplierCreateWithoutRelationsInput', List['SupplierCreateWithoutRelationsInput']]
    connect: Union['SupplierWhereUniqueInput', List['SupplierWhereUniqueInput']]


_SupplierWhereUnique_id_Input = TypedDict(
    '_SupplierWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_SupplierWhereUnique_url_Input = TypedDict(
    '_SupplierWhereUnique_url_Input',
    {
        'url': '_str',
    },
    total=True
)

SupplierWhereUniqueInput = Union[
    '_SupplierWhereUnique_id_Input',
    '_SupplierWhereUnique_url_Input',
]


class SupplierUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    url: Optional[_str]
    name: _str
    riskScore: _str
    summary: _str
    flags: 'types.StringListUpdate'
    analysisData: Optional['fields.Json']
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    chats: 'ChatLogUpdateManyWithoutRelationsInput'


class SupplierUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    url: Optional[_str]
    name: _str
    riskScore: _str
    summary: _str
    flags: 'types.StringListUpdate'
    analysisData: Optional['fields.Json']
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class SupplierUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['SupplierCreateWithoutRelationsInput']
    connect: List['SupplierWhereUniqueInput']
    set: List['SupplierWhereUniqueInput']
    disconnect: List['SupplierWhereUniqueInput']
    delete: List['SupplierWhereUniqueInput']

    # TODO
    # update: List['SupplierUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['SupplierUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['SupplierScalarWhereInput']
    # upsert: List['SupplierUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['SupplierCreateOrConnectWithoutRelationsInput']


class SupplierUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'SupplierCreateWithoutRelationsInput'
    connect: 'SupplierWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'SupplierUpdateInput'
    # upsert: 'SupplierUpsertWithoutRelationsInput'
    # connectOrCreate: 'SupplierCreateOrConnectWithoutRelationsInput'


class SupplierUpsertInput(TypedDict):
    create: 'SupplierCreateInput'
    update: 'SupplierUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Supplier_id_OrderByInput = TypedDict(
    '_Supplier_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Supplier_url_OrderByInput = TypedDict(
    '_Supplier_url_OrderByInput',
    {
        'url': 'SortOrder',
    },
    total=True
)

_Supplier_name_OrderByInput = TypedDict(
    '_Supplier_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Supplier_riskScore_OrderByInput = TypedDict(
    '_Supplier_riskScore_OrderByInput',
    {
        'riskScore': 'SortOrder',
    },
    total=True
)

_Supplier_summary_OrderByInput = TypedDict(
    '_Supplier_summary_OrderByInput',
    {
        'summary': 'SortOrder',
    },
    total=True
)

_Supplier_flags_OrderByInput = TypedDict(
    '_Supplier_flags_OrderByInput',
    {
        'flags': 'SortOrder',
    },
    total=True
)

_Supplier_analysisData_OrderByInput = TypedDict(
    '_Supplier_analysisData_OrderByInput',
    {
        'analysisData': 'SortOrder',
    },
    total=True
)

_Supplier_createdAt_OrderByInput = TypedDict(
    '_Supplier_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Supplier_updatedAt_OrderByInput = TypedDict(
    '_Supplier_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

SupplierOrderByInput = Union[
    '_Supplier_id_OrderByInput',
    '_Supplier_url_OrderByInput',
    '_Supplier_name_OrderByInput',
    '_Supplier_riskScore_OrderByInput',
    '_Supplier_summary_OrderByInput',
    '_Supplier_flags_OrderByInput',
    '_Supplier_analysisData_OrderByInput',
    '_Supplier_createdAt_OrderByInput',
    '_Supplier_updatedAt_OrderByInput',
]



# recursive Supplier types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

SupplierRelationFilter = TypedDict(
    'SupplierRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class SupplierListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class SupplierInclude(TypedDict, total=False):
    """Supplier relational arguments"""
    chats: Union[bool, 'FindManyChatLogArgsFromSupplier']


    

class SupplierIncludeFromSupplier(TypedDict, total=False):
    """Relational arguments for Supplier"""
    chats: Union[bool, 'FindManyChatLogArgsFromSupplierRecursive1']


class SupplierIncludeFromSupplierRecursive1(TypedDict, total=False):
    """Relational arguments for Supplier"""
    chats: Union[bool, 'FindManyChatLogArgsFromSupplierRecursive2']


class SupplierIncludeFromSupplierRecursive2(TypedDict, total=False):
    """Relational arguments for Supplier"""
    chats: Union[bool, 'FindManyChatLogArgsFromSupplierRecursive3']


class SupplierIncludeFromSupplierRecursive3(TypedDict, total=False):
    """Relational arguments for Supplier"""
    chats: Union[bool, 'FindManyChatLogArgsFromSupplierRecursive4']


class SupplierIncludeFromSupplierRecursive4(TypedDict, total=False):
    """Relational arguments for Supplier"""

    

class SupplierArgsFromSupplier(TypedDict, total=False):
    """Arguments for Supplier"""
    include: 'SupplierIncludeFromSupplierRecursive1'


class SupplierArgsFromSupplierRecursive1(TypedDict, total=False):
    """Arguments for Supplier"""
    include: 'SupplierIncludeFromSupplierRecursive2'


class SupplierArgsFromSupplierRecursive2(TypedDict, total=False):
    """Arguments for Supplier"""
    include: 'SupplierIncludeFromSupplierRecursive3'


class SupplierArgsFromSupplierRecursive3(TypedDict, total=False):
    """Arguments for Supplier"""
    include: 'SupplierIncludeFromSupplierRecursive4'


class SupplierArgsFromSupplierRecursive4(TypedDict, total=False):
    """Arguments for Supplier"""
    
    

class FindManySupplierArgsFromSupplier(TypedDict, total=False):
    """Arguments for Supplier"""
    take: int
    skip: int
    order_by: Union['SupplierOrderByInput', List['SupplierOrderByInput']]
    where: 'SupplierWhereInput'
    cursor: 'SupplierWhereUniqueInput'
    distinct: List['SupplierScalarFieldKeys']
    include: 'SupplierIncludeFromSupplierRecursive1'


class FindManySupplierArgsFromSupplierRecursive1(TypedDict, total=False):
    """Arguments for Supplier"""
    take: int
    skip: int
    order_by: Union['SupplierOrderByInput', List['SupplierOrderByInput']]
    where: 'SupplierWhereInput'
    cursor: 'SupplierWhereUniqueInput'
    distinct: List['SupplierScalarFieldKeys']
    include: 'SupplierIncludeFromSupplierRecursive2'


class FindManySupplierArgsFromSupplierRecursive2(TypedDict, total=False):
    """Arguments for Supplier"""
    take: int
    skip: int
    order_by: Union['SupplierOrderByInput', List['SupplierOrderByInput']]
    where: 'SupplierWhereInput'
    cursor: 'SupplierWhereUniqueInput'
    distinct: List['SupplierScalarFieldKeys']
    include: 'SupplierIncludeFromSupplierRecursive3'


class FindManySupplierArgsFromSupplierRecursive3(TypedDict, total=False):
    """Arguments for Supplier"""
    take: int
    skip: int
    order_by: Union['SupplierOrderByInput', List['SupplierOrderByInput']]
    where: 'SupplierWhereInput'
    cursor: 'SupplierWhereUniqueInput'
    distinct: List['SupplierScalarFieldKeys']
    include: 'SupplierIncludeFromSupplierRecursive4'


class FindManySupplierArgsFromSupplierRecursive4(TypedDict, total=False):
    """Arguments for Supplier"""
    take: int
    skip: int
    order_by: Union['SupplierOrderByInput', List['SupplierOrderByInput']]
    where: 'SupplierWhereInput'
    cursor: 'SupplierWhereUniqueInput'
    distinct: List['SupplierScalarFieldKeys']
    
    

class ChatLogIncludeFromSupplier(TypedDict, total=False):
    """Relational arguments for Supplier"""
    supplier: Union[bool, 'SupplierArgsFromSupplierRecursive1']


class ChatLogIncludeFromSupplierRecursive1(TypedDict, total=False):
    """Relational arguments for Supplier"""
    supplier: Union[bool, 'SupplierArgsFromSupplierRecursive2']


class ChatLogIncludeFromSupplierRecursive2(TypedDict, total=False):
    """Relational arguments for Supplier"""
    supplier: Union[bool, 'SupplierArgsFromSupplierRecursive3']


class ChatLogIncludeFromSupplierRecursive3(TypedDict, total=False):
    """Relational arguments for Supplier"""
    supplier: Union[bool, 'SupplierArgsFromSupplierRecursive4']


class ChatLogIncludeFromSupplierRecursive4(TypedDict, total=False):
    """Relational arguments for Supplier"""

    

class ChatLogArgsFromSupplier(TypedDict, total=False):
    """Arguments for Supplier"""
    include: 'ChatLogIncludeFromChatLogRecursive1'


class ChatLogArgsFromSupplierRecursive1(TypedDict, total=False):
    """Arguments for Supplier"""
    include: 'ChatLogIncludeFromChatLogRecursive2'


class ChatLogArgsFromSupplierRecursive2(TypedDict, total=False):
    """Arguments for Supplier"""
    include: 'ChatLogIncludeFromChatLogRecursive3'


class ChatLogArgsFromSupplierRecursive3(TypedDict, total=False):
    """Arguments for Supplier"""
    include: 'ChatLogIncludeFromChatLogRecursive4'


class ChatLogArgsFromSupplierRecursive4(TypedDict, total=False):
    """Arguments for Supplier"""
    
    

class FindManyChatLogArgsFromSupplier(TypedDict, total=False):
    """Arguments for Supplier"""
    take: int
    skip: int
    order_by: Union['ChatLogOrderByInput', List['ChatLogOrderByInput']]
    where: 'ChatLogWhereInput'
    cursor: 'ChatLogWhereUniqueInput'
    distinct: List['ChatLogScalarFieldKeys']
    include: 'ChatLogIncludeFromChatLogRecursive1'


class FindManyChatLogArgsFromSupplierRecursive1(TypedDict, total=False):
    """Arguments for Supplier"""
    take: int
    skip: int
    order_by: Union['ChatLogOrderByInput', List['ChatLogOrderByInput']]
    where: 'ChatLogWhereInput'
    cursor: 'ChatLogWhereUniqueInput'
    distinct: List['ChatLogScalarFieldKeys']
    include: 'ChatLogIncludeFromChatLogRecursive2'


class FindManyChatLogArgsFromSupplierRecursive2(TypedDict, total=False):
    """Arguments for Supplier"""
    take: int
    skip: int
    order_by: Union['ChatLogOrderByInput', List['ChatLogOrderByInput']]
    where: 'ChatLogWhereInput'
    cursor: 'ChatLogWhereUniqueInput'
    distinct: List['ChatLogScalarFieldKeys']
    include: 'ChatLogIncludeFromChatLogRecursive3'


class FindManyChatLogArgsFromSupplierRecursive3(TypedDict, total=False):
    """Arguments for Supplier"""
    take: int
    skip: int
    order_by: Union['ChatLogOrderByInput', List['ChatLogOrderByInput']]
    where: 'ChatLogWhereInput'
    cursor: 'ChatLogWhereUniqueInput'
    distinct: List['ChatLogScalarFieldKeys']
    include: 'ChatLogIncludeFromChatLogRecursive4'


class FindManyChatLogArgsFromSupplierRecursive4(TypedDict, total=False):
    """Arguments for Supplier"""
    take: int
    skip: int
    order_by: Union['ChatLogOrderByInput', List['ChatLogOrderByInput']]
    where: 'ChatLogWhereInput'
    cursor: 'ChatLogWhereUniqueInput'
    distinct: List['ChatLogScalarFieldKeys']
    


FindManySupplierArgs = FindManySupplierArgsFromSupplier
FindFirstSupplierArgs = FindManySupplierArgsFromSupplier


    

class SupplierWhereInput(TypedDict, total=False):
    """Supplier arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    url: Union[None, _str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    riskScore: Union[_str, 'types.StringFilter']
    summary: Union[_str, 'types.StringFilter']
    flags: 'types.StringListFilter'
    analysisData: Union[None, 'fields.Json', 'types.JsonFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    chats: 'ChatLogListRelationFilter'

    # should be noted that AND and NOT should be Union['SupplierWhereInputRecursive1', List['SupplierWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['SupplierWhereInputRecursive1']
    OR: List['SupplierWhereInputRecursive1']
    NOT: List['SupplierWhereInputRecursive1']


class SupplierWhereInputRecursive1(TypedDict, total=False):
    """Supplier arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    url: Union[None, _str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    riskScore: Union[_str, 'types.StringFilter']
    summary: Union[_str, 'types.StringFilter']
    flags: 'types.StringListFilter'
    analysisData: Union[None, 'fields.Json', 'types.JsonFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    chats: 'ChatLogListRelationFilter'

    # should be noted that AND and NOT should be Union['SupplierWhereInputRecursive2', List['SupplierWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['SupplierWhereInputRecursive2']
    OR: List['SupplierWhereInputRecursive2']
    NOT: List['SupplierWhereInputRecursive2']


class SupplierWhereInputRecursive2(TypedDict, total=False):
    """Supplier arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    url: Union[None, _str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    riskScore: Union[_str, 'types.StringFilter']
    summary: Union[_str, 'types.StringFilter']
    flags: 'types.StringListFilter'
    analysisData: Union[None, 'fields.Json', 'types.JsonFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    chats: 'ChatLogListRelationFilter'

    # should be noted that AND and NOT should be Union['SupplierWhereInputRecursive3', List['SupplierWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['SupplierWhereInputRecursive3']
    OR: List['SupplierWhereInputRecursive3']
    NOT: List['SupplierWhereInputRecursive3']


class SupplierWhereInputRecursive3(TypedDict, total=False):
    """Supplier arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    url: Union[None, _str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    riskScore: Union[_str, 'types.StringFilter']
    summary: Union[_str, 'types.StringFilter']
    flags: 'types.StringListFilter'
    analysisData: Union[None, 'fields.Json', 'types.JsonFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    chats: 'ChatLogListRelationFilter'

    # should be noted that AND and NOT should be Union['SupplierWhereInputRecursive4', List['SupplierWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['SupplierWhereInputRecursive4']
    OR: List['SupplierWhereInputRecursive4']
    NOT: List['SupplierWhereInputRecursive4']


class SupplierWhereInputRecursive4(TypedDict, total=False):
    """Supplier arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    url: Union[None, _str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    riskScore: Union[_str, 'types.StringFilter']
    summary: Union[_str, 'types.StringFilter']
    flags: 'types.StringListFilter'
    analysisData: Union[None, 'fields.Json', 'types.JsonFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    chats: 'ChatLogListRelationFilter'



# aggregate Supplier types


    

class SupplierScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Supplier arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    url: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    riskScore: Union[_str, 'types.StringWithAggregatesFilter']
    summary: Union[_str, 'types.StringWithAggregatesFilter']
    flags: Union[_str, 'types.StringWithAggregatesFilter']
    analysisData: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SupplierScalarWhereWithAggregatesInputRecursive1']
    OR: List['SupplierScalarWhereWithAggregatesInputRecursive1']
    NOT: List['SupplierScalarWhereWithAggregatesInputRecursive1']


class SupplierScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Supplier arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    url: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    riskScore: Union[_str, 'types.StringWithAggregatesFilter']
    summary: Union[_str, 'types.StringWithAggregatesFilter']
    flags: Union[_str, 'types.StringWithAggregatesFilter']
    analysisData: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SupplierScalarWhereWithAggregatesInputRecursive2']
    OR: List['SupplierScalarWhereWithAggregatesInputRecursive2']
    NOT: List['SupplierScalarWhereWithAggregatesInputRecursive2']


class SupplierScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Supplier arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    url: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    riskScore: Union[_str, 'types.StringWithAggregatesFilter']
    summary: Union[_str, 'types.StringWithAggregatesFilter']
    flags: Union[_str, 'types.StringWithAggregatesFilter']
    analysisData: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SupplierScalarWhereWithAggregatesInputRecursive3']
    OR: List['SupplierScalarWhereWithAggregatesInputRecursive3']
    NOT: List['SupplierScalarWhereWithAggregatesInputRecursive3']


class SupplierScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Supplier arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    url: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    riskScore: Union[_str, 'types.StringWithAggregatesFilter']
    summary: Union[_str, 'types.StringWithAggregatesFilter']
    flags: Union[_str, 'types.StringWithAggregatesFilter']
    analysisData: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SupplierScalarWhereWithAggregatesInputRecursive4']
    OR: List['SupplierScalarWhereWithAggregatesInputRecursive4']
    NOT: List['SupplierScalarWhereWithAggregatesInputRecursive4']


class SupplierScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Supplier arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    url: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    riskScore: Union[_str, 'types.StringWithAggregatesFilter']
    summary: Union[_str, 'types.StringWithAggregatesFilter']
    flags: Union[_str, 'types.StringWithAggregatesFilter']
    analysisData: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class SupplierGroupByOutput(TypedDict, total=False):
    id: _str
    url: _str
    name: _str
    riskScore: _str
    summary: _str
    flags: List[_str]
    analysisData: 'fields.Json'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'SupplierSumAggregateOutput'
    _avg: 'SupplierAvgAggregateOutput'
    _min: 'SupplierMinAggregateOutput'
    _max: 'SupplierMaxAggregateOutput'
    _count: 'SupplierCountAggregateOutput'


class SupplierAvgAggregateOutput(TypedDict, total=False):
    """Supplier output for aggregating averages"""


class SupplierSumAggregateOutput(TypedDict, total=False):
    """Supplier output for aggregating sums"""


class SupplierScalarAggregateOutput(TypedDict, total=False):
    """Supplier output including scalar fields"""
    id: _str
    url: _str
    name: _str
    riskScore: _str
    summary: _str
    flags: List[_str]
    analysisData: 'fields.Json'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


SupplierMinAggregateOutput = SupplierScalarAggregateOutput
SupplierMaxAggregateOutput = SupplierScalarAggregateOutput


class SupplierMaxAggregateInput(TypedDict, total=False):
    """Supplier input for aggregating by max"""
    id: bool
    url: bool
    name: bool
    riskScore: bool
    summary: bool
    flags: bool
    analysisData: bool
    createdAt: bool
    updatedAt: bool


class SupplierMinAggregateInput(TypedDict, total=False):
    """Supplier input for aggregating by min"""
    id: bool
    url: bool
    name: bool
    riskScore: bool
    summary: bool
    flags: bool
    analysisData: bool
    createdAt: bool
    updatedAt: bool


class SupplierNumberAggregateInput(TypedDict, total=False):
    """Supplier input for aggregating numbers"""


SupplierAvgAggregateInput = SupplierNumberAggregateInput
SupplierSumAggregateInput = SupplierNumberAggregateInput


SupplierCountAggregateInput = TypedDict(
    'SupplierCountAggregateInput',
    {
        'id': bool,
        'url': bool,
        'name': bool,
        'riskScore': bool,
        'summary': bool,
        'flags': bool,
        'analysisData': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

SupplierCountAggregateOutput = TypedDict(
    'SupplierCountAggregateOutput',
    {
        'id': int,
        'url': int,
        'name': int,
        'riskScore': int,
        'summary': int,
        'flags': int,
        'analysisData': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


SupplierKeys = Literal[
    'id',
    'url',
    'name',
    'riskScore',
    'summary',
    'flags',
    'analysisData',
    'createdAt',
    'updatedAt',
    'chats',
]
SupplierScalarFieldKeys = Literal[
    'id',
    'url',
    'name',
    'riskScore',
    'summary',
    'flags',
    'analysisData',
    'createdAt',
    'updatedAt',
]
SupplierScalarFieldKeysT = TypeVar('SupplierScalarFieldKeysT', bound=SupplierScalarFieldKeys)

SupplierRelationalFieldKeys = Literal[
        'chats',
    ]

# ChatLog types

class ChatLogOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the ChatLog create method"""
    id: _str
    url: Optional[_str]
    sources: List[_str]
    createdAt: datetime.datetime
    supplier: 'SupplierCreateNestedWithoutRelationsInput'


class ChatLogCreateInput(ChatLogOptionalCreateInput):
    """Required arguments to the ChatLog create method"""
    question: _str
    answer: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ChatLogOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the ChatLog create method, without relations"""
    id: _str
    url: Optional[_str]
    sources: List[_str]
    createdAt: datetime.datetime


class ChatLogCreateWithoutRelationsInput(ChatLogOptionalCreateWithoutRelationsInput):
    """Required arguments to the ChatLog create method, without relations"""
    question: _str
    answer: _str


class ChatLogCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ChatLogCreateWithoutRelationsInput'
    connect: 'ChatLogWhereUniqueInput'


class ChatLogCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ChatLogCreateWithoutRelationsInput', List['ChatLogCreateWithoutRelationsInput']]
    connect: Union['ChatLogWhereUniqueInput', List['ChatLogWhereUniqueInput']]


_ChatLogWhereUnique_id_Input = TypedDict(
    '_ChatLogWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

ChatLogWhereUniqueInput = _ChatLogWhereUnique_id_Input


class ChatLogUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    question: _str
    answer: _str
    sources: 'types.StringListUpdate'
    createdAt: datetime.datetime
    supplier: 'SupplierUpdateOneWithoutRelationsInput'


class ChatLogUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    question: _str
    answer: _str
    sources: 'types.StringListUpdate'
    createdAt: datetime.datetime


class ChatLogUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ChatLogCreateWithoutRelationsInput']
    connect: List['ChatLogWhereUniqueInput']
    set: List['ChatLogWhereUniqueInput']
    disconnect: List['ChatLogWhereUniqueInput']
    delete: List['ChatLogWhereUniqueInput']

    # TODO
    # update: List['ChatLogUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ChatLogUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ChatLogScalarWhereInput']
    # upsert: List['ChatLogUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['ChatLogCreateOrConnectWithoutRelationsInput']


class ChatLogUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ChatLogCreateWithoutRelationsInput'
    connect: 'ChatLogWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ChatLogUpdateInput'
    # upsert: 'ChatLogUpsertWithoutRelationsInput'
    # connectOrCreate: 'ChatLogCreateOrConnectWithoutRelationsInput'


class ChatLogUpsertInput(TypedDict):
    create: 'ChatLogCreateInput'
    update: 'ChatLogUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_ChatLog_id_OrderByInput = TypedDict(
    '_ChatLog_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_ChatLog_url_OrderByInput = TypedDict(
    '_ChatLog_url_OrderByInput',
    {
        'url': 'SortOrder',
    },
    total=True
)

_ChatLog_question_OrderByInput = TypedDict(
    '_ChatLog_question_OrderByInput',
    {
        'question': 'SortOrder',
    },
    total=True
)

_ChatLog_answer_OrderByInput = TypedDict(
    '_ChatLog_answer_OrderByInput',
    {
        'answer': 'SortOrder',
    },
    total=True
)

_ChatLog_sources_OrderByInput = TypedDict(
    '_ChatLog_sources_OrderByInput',
    {
        'sources': 'SortOrder',
    },
    total=True
)

_ChatLog_createdAt_OrderByInput = TypedDict(
    '_ChatLog_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

ChatLogOrderByInput = Union[
    '_ChatLog_id_OrderByInput',
    '_ChatLog_url_OrderByInput',
    '_ChatLog_question_OrderByInput',
    '_ChatLog_answer_OrderByInput',
    '_ChatLog_sources_OrderByInput',
    '_ChatLog_createdAt_OrderByInput',
]



# recursive ChatLog types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ChatLogRelationFilter = TypedDict(
    'ChatLogRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ChatLogListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ChatLogInclude(TypedDict, total=False):
    """ChatLog relational arguments"""
    supplier: Union[bool, 'SupplierArgsFromChatLog']


    

class SupplierIncludeFromChatLog(TypedDict, total=False):
    """Relational arguments for ChatLog"""
    chats: Union[bool, 'FindManyChatLogArgsFromChatLogRecursive1']


class SupplierIncludeFromChatLogRecursive1(TypedDict, total=False):
    """Relational arguments for ChatLog"""
    chats: Union[bool, 'FindManyChatLogArgsFromChatLogRecursive2']


class SupplierIncludeFromChatLogRecursive2(TypedDict, total=False):
    """Relational arguments for ChatLog"""
    chats: Union[bool, 'FindManyChatLogArgsFromChatLogRecursive3']


class SupplierIncludeFromChatLogRecursive3(TypedDict, total=False):
    """Relational arguments for ChatLog"""
    chats: Union[bool, 'FindManyChatLogArgsFromChatLogRecursive4']


class SupplierIncludeFromChatLogRecursive4(TypedDict, total=False):
    """Relational arguments for ChatLog"""

    

class SupplierArgsFromChatLog(TypedDict, total=False):
    """Arguments for ChatLog"""
    include: 'SupplierIncludeFromSupplierRecursive1'


class SupplierArgsFromChatLogRecursive1(TypedDict, total=False):
    """Arguments for ChatLog"""
    include: 'SupplierIncludeFromSupplierRecursive2'


class SupplierArgsFromChatLogRecursive2(TypedDict, total=False):
    """Arguments for ChatLog"""
    include: 'SupplierIncludeFromSupplierRecursive3'


class SupplierArgsFromChatLogRecursive3(TypedDict, total=False):
    """Arguments for ChatLog"""
    include: 'SupplierIncludeFromSupplierRecursive4'


class SupplierArgsFromChatLogRecursive4(TypedDict, total=False):
    """Arguments for ChatLog"""
    
    

class FindManySupplierArgsFromChatLog(TypedDict, total=False):
    """Arguments for ChatLog"""
    take: int
    skip: int
    order_by: Union['SupplierOrderByInput', List['SupplierOrderByInput']]
    where: 'SupplierWhereInput'
    cursor: 'SupplierWhereUniqueInput'
    distinct: List['SupplierScalarFieldKeys']
    include: 'SupplierIncludeFromSupplierRecursive1'


class FindManySupplierArgsFromChatLogRecursive1(TypedDict, total=False):
    """Arguments for ChatLog"""
    take: int
    skip: int
    order_by: Union['SupplierOrderByInput', List['SupplierOrderByInput']]
    where: 'SupplierWhereInput'
    cursor: 'SupplierWhereUniqueInput'
    distinct: List['SupplierScalarFieldKeys']
    include: 'SupplierIncludeFromSupplierRecursive2'


class FindManySupplierArgsFromChatLogRecursive2(TypedDict, total=False):
    """Arguments for ChatLog"""
    take: int
    skip: int
    order_by: Union['SupplierOrderByInput', List['SupplierOrderByInput']]
    where: 'SupplierWhereInput'
    cursor: 'SupplierWhereUniqueInput'
    distinct: List['SupplierScalarFieldKeys']
    include: 'SupplierIncludeFromSupplierRecursive3'


class FindManySupplierArgsFromChatLogRecursive3(TypedDict, total=False):
    """Arguments for ChatLog"""
    take: int
    skip: int
    order_by: Union['SupplierOrderByInput', List['SupplierOrderByInput']]
    where: 'SupplierWhereInput'
    cursor: 'SupplierWhereUniqueInput'
    distinct: List['SupplierScalarFieldKeys']
    include: 'SupplierIncludeFromSupplierRecursive4'


class FindManySupplierArgsFromChatLogRecursive4(TypedDict, total=False):
    """Arguments for ChatLog"""
    take: int
    skip: int
    order_by: Union['SupplierOrderByInput', List['SupplierOrderByInput']]
    where: 'SupplierWhereInput'
    cursor: 'SupplierWhereUniqueInput'
    distinct: List['SupplierScalarFieldKeys']
    
    

class ChatLogIncludeFromChatLog(TypedDict, total=False):
    """Relational arguments for ChatLog"""
    supplier: Union[bool, 'SupplierArgsFromChatLogRecursive1']


class ChatLogIncludeFromChatLogRecursive1(TypedDict, total=False):
    """Relational arguments for ChatLog"""
    supplier: Union[bool, 'SupplierArgsFromChatLogRecursive2']


class ChatLogIncludeFromChatLogRecursive2(TypedDict, total=False):
    """Relational arguments for ChatLog"""
    supplier: Union[bool, 'SupplierArgsFromChatLogRecursive3']


class ChatLogIncludeFromChatLogRecursive3(TypedDict, total=False):
    """Relational arguments for ChatLog"""
    supplier: Union[bool, 'SupplierArgsFromChatLogRecursive4']


class ChatLogIncludeFromChatLogRecursive4(TypedDict, total=False):
    """Relational arguments for ChatLog"""

    

class ChatLogArgsFromChatLog(TypedDict, total=False):
    """Arguments for ChatLog"""
    include: 'ChatLogIncludeFromChatLogRecursive1'


class ChatLogArgsFromChatLogRecursive1(TypedDict, total=False):
    """Arguments for ChatLog"""
    include: 'ChatLogIncludeFromChatLogRecursive2'


class ChatLogArgsFromChatLogRecursive2(TypedDict, total=False):
    """Arguments for ChatLog"""
    include: 'ChatLogIncludeFromChatLogRecursive3'


class ChatLogArgsFromChatLogRecursive3(TypedDict, total=False):
    """Arguments for ChatLog"""
    include: 'ChatLogIncludeFromChatLogRecursive4'


class ChatLogArgsFromChatLogRecursive4(TypedDict, total=False):
    """Arguments for ChatLog"""
    
    

class FindManyChatLogArgsFromChatLog(TypedDict, total=False):
    """Arguments for ChatLog"""
    take: int
    skip: int
    order_by: Union['ChatLogOrderByInput', List['ChatLogOrderByInput']]
    where: 'ChatLogWhereInput'
    cursor: 'ChatLogWhereUniqueInput'
    distinct: List['ChatLogScalarFieldKeys']
    include: 'ChatLogIncludeFromChatLogRecursive1'


class FindManyChatLogArgsFromChatLogRecursive1(TypedDict, total=False):
    """Arguments for ChatLog"""
    take: int
    skip: int
    order_by: Union['ChatLogOrderByInput', List['ChatLogOrderByInput']]
    where: 'ChatLogWhereInput'
    cursor: 'ChatLogWhereUniqueInput'
    distinct: List['ChatLogScalarFieldKeys']
    include: 'ChatLogIncludeFromChatLogRecursive2'


class FindManyChatLogArgsFromChatLogRecursive2(TypedDict, total=False):
    """Arguments for ChatLog"""
    take: int
    skip: int
    order_by: Union['ChatLogOrderByInput', List['ChatLogOrderByInput']]
    where: 'ChatLogWhereInput'
    cursor: 'ChatLogWhereUniqueInput'
    distinct: List['ChatLogScalarFieldKeys']
    include: 'ChatLogIncludeFromChatLogRecursive3'


class FindManyChatLogArgsFromChatLogRecursive3(TypedDict, total=False):
    """Arguments for ChatLog"""
    take: int
    skip: int
    order_by: Union['ChatLogOrderByInput', List['ChatLogOrderByInput']]
    where: 'ChatLogWhereInput'
    cursor: 'ChatLogWhereUniqueInput'
    distinct: List['ChatLogScalarFieldKeys']
    include: 'ChatLogIncludeFromChatLogRecursive4'


class FindManyChatLogArgsFromChatLogRecursive4(TypedDict, total=False):
    """Arguments for ChatLog"""
    take: int
    skip: int
    order_by: Union['ChatLogOrderByInput', List['ChatLogOrderByInput']]
    where: 'ChatLogWhereInput'
    cursor: 'ChatLogWhereUniqueInput'
    distinct: List['ChatLogScalarFieldKeys']
    


FindManyChatLogArgs = FindManyChatLogArgsFromChatLog
FindFirstChatLogArgs = FindManyChatLogArgsFromChatLog


    

class ChatLogWhereInput(TypedDict, total=False):
    """ChatLog arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    url: Union[None, _str, 'types.StringFilter']
    question: Union[_str, 'types.StringFilter']
    answer: Union[_str, 'types.StringFilter']
    sources: 'types.StringListFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    supplier: 'SupplierRelationFilter'

    # should be noted that AND and NOT should be Union['ChatLogWhereInputRecursive1', List['ChatLogWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ChatLogWhereInputRecursive1']
    OR: List['ChatLogWhereInputRecursive1']
    NOT: List['ChatLogWhereInputRecursive1']


class ChatLogWhereInputRecursive1(TypedDict, total=False):
    """ChatLog arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    url: Union[None, _str, 'types.StringFilter']
    question: Union[_str, 'types.StringFilter']
    answer: Union[_str, 'types.StringFilter']
    sources: 'types.StringListFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    supplier: 'SupplierRelationFilter'

    # should be noted that AND and NOT should be Union['ChatLogWhereInputRecursive2', List['ChatLogWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ChatLogWhereInputRecursive2']
    OR: List['ChatLogWhereInputRecursive2']
    NOT: List['ChatLogWhereInputRecursive2']


class ChatLogWhereInputRecursive2(TypedDict, total=False):
    """ChatLog arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    url: Union[None, _str, 'types.StringFilter']
    question: Union[_str, 'types.StringFilter']
    answer: Union[_str, 'types.StringFilter']
    sources: 'types.StringListFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    supplier: 'SupplierRelationFilter'

    # should be noted that AND and NOT should be Union['ChatLogWhereInputRecursive3', List['ChatLogWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ChatLogWhereInputRecursive3']
    OR: List['ChatLogWhereInputRecursive3']
    NOT: List['ChatLogWhereInputRecursive3']


class ChatLogWhereInputRecursive3(TypedDict, total=False):
    """ChatLog arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    url: Union[None, _str, 'types.StringFilter']
    question: Union[_str, 'types.StringFilter']
    answer: Union[_str, 'types.StringFilter']
    sources: 'types.StringListFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    supplier: 'SupplierRelationFilter'

    # should be noted that AND and NOT should be Union['ChatLogWhereInputRecursive4', List['ChatLogWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ChatLogWhereInputRecursive4']
    OR: List['ChatLogWhereInputRecursive4']
    NOT: List['ChatLogWhereInputRecursive4']


class ChatLogWhereInputRecursive4(TypedDict, total=False):
    """ChatLog arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    url: Union[None, _str, 'types.StringFilter']
    question: Union[_str, 'types.StringFilter']
    answer: Union[_str, 'types.StringFilter']
    sources: 'types.StringListFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    supplier: 'SupplierRelationFilter'



# aggregate ChatLog types


    

class ChatLogScalarWhereWithAggregatesInput(TypedDict, total=False):
    """ChatLog arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    url: Union[_str, 'types.StringWithAggregatesFilter']
    question: Union[_str, 'types.StringWithAggregatesFilter']
    answer: Union[_str, 'types.StringWithAggregatesFilter']
    sources: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ChatLogScalarWhereWithAggregatesInputRecursive1']
    OR: List['ChatLogScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ChatLogScalarWhereWithAggregatesInputRecursive1']


class ChatLogScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """ChatLog arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    url: Union[_str, 'types.StringWithAggregatesFilter']
    question: Union[_str, 'types.StringWithAggregatesFilter']
    answer: Union[_str, 'types.StringWithAggregatesFilter']
    sources: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ChatLogScalarWhereWithAggregatesInputRecursive2']
    OR: List['ChatLogScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ChatLogScalarWhereWithAggregatesInputRecursive2']


class ChatLogScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """ChatLog arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    url: Union[_str, 'types.StringWithAggregatesFilter']
    question: Union[_str, 'types.StringWithAggregatesFilter']
    answer: Union[_str, 'types.StringWithAggregatesFilter']
    sources: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ChatLogScalarWhereWithAggregatesInputRecursive3']
    OR: List['ChatLogScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ChatLogScalarWhereWithAggregatesInputRecursive3']


class ChatLogScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """ChatLog arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    url: Union[_str, 'types.StringWithAggregatesFilter']
    question: Union[_str, 'types.StringWithAggregatesFilter']
    answer: Union[_str, 'types.StringWithAggregatesFilter']
    sources: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ChatLogScalarWhereWithAggregatesInputRecursive4']
    OR: List['ChatLogScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ChatLogScalarWhereWithAggregatesInputRecursive4']


class ChatLogScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """ChatLog arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    url: Union[_str, 'types.StringWithAggregatesFilter']
    question: Union[_str, 'types.StringWithAggregatesFilter']
    answer: Union[_str, 'types.StringWithAggregatesFilter']
    sources: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class ChatLogGroupByOutput(TypedDict, total=False):
    id: _str
    url: _str
    question: _str
    answer: _str
    sources: List[_str]
    createdAt: datetime.datetime
    _sum: 'ChatLogSumAggregateOutput'
    _avg: 'ChatLogAvgAggregateOutput'
    _min: 'ChatLogMinAggregateOutput'
    _max: 'ChatLogMaxAggregateOutput'
    _count: 'ChatLogCountAggregateOutput'


class ChatLogAvgAggregateOutput(TypedDict, total=False):
    """ChatLog output for aggregating averages"""


class ChatLogSumAggregateOutput(TypedDict, total=False):
    """ChatLog output for aggregating sums"""


class ChatLogScalarAggregateOutput(TypedDict, total=False):
    """ChatLog output including scalar fields"""
    id: _str
    url: _str
    question: _str
    answer: _str
    sources: List[_str]
    createdAt: datetime.datetime


ChatLogMinAggregateOutput = ChatLogScalarAggregateOutput
ChatLogMaxAggregateOutput = ChatLogScalarAggregateOutput


class ChatLogMaxAggregateInput(TypedDict, total=False):
    """ChatLog input for aggregating by max"""
    id: bool
    url: bool
    question: bool
    answer: bool
    sources: bool
    createdAt: bool


class ChatLogMinAggregateInput(TypedDict, total=False):
    """ChatLog input for aggregating by min"""
    id: bool
    url: bool
    question: bool
    answer: bool
    sources: bool
    createdAt: bool


class ChatLogNumberAggregateInput(TypedDict, total=False):
    """ChatLog input for aggregating numbers"""


ChatLogAvgAggregateInput = ChatLogNumberAggregateInput
ChatLogSumAggregateInput = ChatLogNumberAggregateInput


ChatLogCountAggregateInput = TypedDict(
    'ChatLogCountAggregateInput',
    {
        'id': bool,
        'url': bool,
        'question': bool,
        'answer': bool,
        'sources': bool,
        'createdAt': bool,
        '_all': bool,
    },
    total=False,
)

ChatLogCountAggregateOutput = TypedDict(
    'ChatLogCountAggregateOutput',
    {
        'id': int,
        'url': int,
        'question': int,
        'answer': int,
        'sources': int,
        'createdAt': int,
        '_all': int,
    },
    total=False,
)


ChatLogKeys = Literal[
    'id',
    'url',
    'question',
    'answer',
    'sources',
    'createdAt',
    'supplier',
]
ChatLogScalarFieldKeys = Literal[
    'id',
    'url',
    'question',
    'answer',
    'sources',
    'createdAt',
]
ChatLogScalarFieldKeysT = TypeVar('ChatLogScalarFieldKeysT', bound=ChatLogScalarFieldKeys)

ChatLogRelationalFieldKeys = Literal[
        'supplier',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields